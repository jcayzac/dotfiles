#!/bin/bash -c /usr/bin/false

if has-command trash
then
  function delete-file() {
		trash -F "${1+$@}"
	}
else
	printf '"trash" is not installed so commands will use "rm" instead.\n'
  function delete-file() {
		rm "${1+$@}"
	}
fi
export -f delete-file

# Process a single file.
#
# $1: SRC extension (pass-in filter)
# $2: DST extension
# $3: file processor expecting $1=input_path $2=output_path
# $4: file path
process-file() (
	set -e -u -o pipefail
	declare EXPECTED_EXT="${1,,}" DST_EXT="${2,,}" PROCESSOR="$3" SRC_FILE="$4"
	declare FOUND_EXT="${SRC_FILE##*.}" DST_FILE="${SRC_FILE%.*}.$DST_EXT" TMP_FILE="${SRC_FILE%.*}.tmp.$DST_EXT"

	# Only run if the file has the expected extension (e.g. "jpg")
	[[ "${FOUND_EXT,,}" == "$EXPECTED_EXT" ]]

	# Install cleanup trap
	function cleanup() {
		declare -i status=$?
		if (($status == 0)); then
			printf '✅ Converted %s\n' "$DST_FILE"
		else
			printf '❌ Could not convert %s\n' "$SRC_FILE"
		fi
		rm -f "$TMP_FILE" >/dev/null 2>&1 || true
		return $status
	}
	trap cleanup SIGINT SIGTERM EXIT

	# Process file
	$PROCESSOR "$SRC_FILE" "$TMP_FILE"

	# Copy last-modified timestamp
	touch -r "$SRC_FILE" "$TMP_FILE"

	# Rename file to proper destination
	mv -f "$TMP_FILE" "$DST_FILE"

	# Trash source file, only if name is different from destination file, ignoring case.
	[[ "${SRC_FILE,,}" == "${DST_FILE,,}" ]] || delete-file "$SRC_FILE"
)

# Process many files
#
# $1: functions to export
# $2: file processor expecting $1=input_path $2=output_path
# $3: extra find filters
# $4…: dir glob(s)
process-many-files() (
	set -e -u -o pipefail
	declare FUNCTIONS="$1" PROCESSOR="$2" FILTERS="$3"

	# Export all the required functions
	export -f process-file $FUNCTIONS $PROCESSOR

	# Find all input files and keep processors busy.
	# Note the find filters are protected against shell globbing (-f).
	shift 3
	xargs -0 -P $(sysctl -n hw.ncpu) -I {} bash -c -e -u -o pipefail "$PROCESSOR"' "$@"' _ {} < <(
		set -f
		find -E ${1+"$@"} $FILTERS -print0
	)
)

# Recursively delete folders with no files
delete-empty-folders() {
	find ${1+"$@"} -type f -iname .DS_Store -print -delete
	find -d ${1+"$@"} -empty -print -delete
}

# Fix a single file's name. This:
#
# - Removes any leading/trailing whitespace.
# - Makes the extension lowercase (works even on case-insensitive filesystems).
fix-filename() {
	declare BASE="${1%.*}" EXT="${1##*.}"
	[[ "$EXT" == 'DS_Store' ]] || {
		# Trim whitespace
		! [[ "$BASE" =~ [[:space:]]*([^[:space:]]|[^[:space:]].*[^[:space:]])[[:space:]]* ]] || BASE="${BASH_REMATCH[1]}"

		# jpeg → jpg
		! [[ "${EXT,,}" == "jpeg" ]] || EXT="jpg"

		# New name
		declare NEW_NAME="${BASE}.${EXT,,}"

		# If the names are different
		[ "$1" == "$NEW_NAME" ] || [ -f "$NEW_NAME" ] || {
			# Rename, first by moving to a temporary file (case-insensitive fs)
			mv -fv "$1" "${NEW_NAME}.tmp" && sleep 0.2 && mv -nv "${NEW_NAME}.tmp" "$NEW_NAME"
		}
	}
}

# Fix many files' filenames.
#
# $1…: dir glob(s)
fix-many-filenames() {
	process-many-files '' fix-filename '-type f' ${1+"$@"}
}

# Video functions require a local install of ffmpeg for now.
# TODO: Use Docker instead.
! has-command ffmpeg || {
	# Put the computer to sleep when there's no more active ffmpeg process.
	function sleep-when-ffmpeg-is-done() {
		while true; do
			(($(ps aux | grep ffmpeg | wc -l) > 1)) || break
			sleep 30
		done && pmset sleepnow
	}

	# Process a single file with ffmpeg
	#
	# $1: SRC extension (pass-in filter)
	# $2: DST extension
	# $3: ffmpeg arguments
	# $4: file path
	function process-file-with-ffmpeg() (
		set -e -u -o pipefail
		declare FFMPEG_ARGS="$3"

		# Local processor
		function ffmpeg-command() {
			ffmpeg -hide_banner -nostats -loglevel panic -i "$1" $FFMPEG_ARGS "$2"
		}
		export -f ffmpeg-command

		process-file "$1" "$2" ffmpeg-command "$4"
	)

	# Process many files with ffmpeg
	#
	# $1: file processor
	# $2: extra find filters
	# $3…: dir glob(s)
	function process-many-files-with-ffmpeg() {
		process-many-files 'process-file-with-ffmpeg' ${1+"$@"}
	}

	# MPEG DASH → M4A
	function convert-dash-to-m4a() {
		process-file-with-ffmpeg mpd m4a '-map_metadata 0 -map 0 -c:v copy -c:a copy -c:s copy -c:d copy -c:t copy -f ipod' "$1"
	}

	function convert-many-dash-to-m4a() {
		process-many-files-with-ffmpeg convert-dash-to-m4a '-type f -iname *.mpd' ${1+"$@"}
	}

	# MOV → MP4
	function convert-mov-to-mp4() {
		process-file-with-ffmpeg mov mp4 '-map_metadata 0 -movflags +faststart -movflags use_metadata_tags -c:v copy -c:a copy -f mp4' "$1"
	}

	function convert-many-mov-to-mp4() {
		process-many-files-with-ffmpeg convert-mov-to-mp4 '-type f -iname *.mov' ${1+"$@"}
	}

	# MP4 → Optimized MP4 for streaming
	function optimize-mp4() {
		process-file-with-ffmpeg mp4 mp4 '-map_metadata 0 -movflags +faststart -movflags use_metadata_tags -c:v copy -c:a copy -f mp4' "$1"
	}

	function optimize-many-mp4() {
		process-many-files-with-ffmpeg optimize-mp4 '-type f -iname *.mp4' ${1+"$@"}
	}

	# MTS → MP4
	# Assumes the MTS stream is H.264+AC3 and that the file's MTIME is the creation date
	# Note: if the MTIME ever gets reset, the stream may have a DateTimeOriginal tag (unused here)!
	function convert-mts-to-mp4() {
		declare CREATION_DATE="$(date -r "$1" '+%Y-%m-%dT%H:%M:%S%z')"
		process-file-with-ffmpeg mts mp4 "-metadata creation_time=${CREATION_DATE} -c:v copy -c:a libfdk_aac -b:a 128k -movflags +faststart -f mp4" "$1"
	}

	function convert-many-mts-to-mp4() {
		process-many-files-with-ffmpeg convert-mts-to-mp4 '-type f -iname *.mts' ${1+"$@"}
	}

	# AVI → MP4
	function convert-avi-to-mp4() {
		declare CREATION_DATE="$(date -r "$1" '+%Y-%m-%dT%H:%M:%S%z')"
		process-file-with-ffmpeg avi mp4 \
			"-metadata creation_time=${CREATION_DATE} -c:v libx264 -pix_fmt yuv420p -crf 15 -preset slow -ac 2 -c:a libfdk_aac -b:a 128k -movflags +faststart -f mp4" \
			"$1"
	}

	function convert-many-avi-to-mp4() {
		process-many-files-with-ffmpeg convert-avi-to-mp4 '-type f -iname *.avi' ${1+"$@"}
	}
}

! has-command exiftool || {
	alias exif='exiftool -q -s -m'

	# iCloud crap. Delete later.
	function set-missing-date-for-icloud-backup-image() {
		declare DIR_PATH="${1%/*}" FILE_NAME="${1##*/}" FILE_EXT="${1##*.}"
		declare DIR_NAME="${DIR_PATH##*/}"
		! [[ "${FILE_EXT,,}" =~ ^(jpe?g|png|heic)$ ]] \
			|| ! [[ "$DIR_NAME" =~ ^([0-9]{4})([0-9]{2})([0-9]{2})-([0-9]{2})([0-9]{2})([0-9]{2})$ ]] || {
			declare \
				YEAR="${BASH_REMATCH[1]}" \
				MONTH="${BASH_REMATCH[2]}" \
				DAY="${BASH_REMATCH[3]}" \
				HOUR="${BASH_REMATCH[4]}" \
				MIN="${BASH_REMATCH[5]}" \
				SEC="${BASH_REMATCH[6]}"
			declare SUBSTITUTE_DATE="${YEAR}-${MONTH}-${DAY}T${HOUR}:${MIN}:${SEC}+0900"
			printf 'Processing %s with candidate date = %s\n' "$1" "$SUBSTITUTE_DATE"
			exiftool -m -overwrite_original -d '%Y-%m-%dT%H:%M:%S%z' -if '(not $DateTimeOriginal) or ($DateTimeOriginal =~ /^(0|3|4|190)/)' "-DateTimeOriginal=$SUBSTITUTE_DATE" "$1"
		}
	}

	function set-missing-date-for-icloud-backup-images() {
		process-many-files '' set-missing-date-for-icloud-backup-image '-type f' ${1+"$@"}
	}

	# Attempt to make some sense of (and unify) date tags in the media library.
	#
	# $1: glob
	function fix-media-timestamps() (
		set +e -u -o pipefail # Note +e: exiftool "fails" when no file was processed
		declare E='exiftool -m -r -P -progress -overwrite_original -api QuickTimeUTC'

		function __msg() {
			printf "\n\x1b[40;34;1m\x1b[K\n  🕰  %s \x1b[K\n\x1b[K\x1b[0m\n\n" "$1"
		}

		#set-missing-date-for-icloud-backup-images ${1+"$@"}

		__msg 'Fix missing DateTimeOriginal if CreateDate is present'
		$E -d '%Y-%m-%dT%H:%M:%S%z' \
			-if '$CreateDate and not ($CreateDate =~ /^(0|3|4|190)/)' \
			-if '(not $DateTimeOriginal) or ($DateTimeOriginal =~ /^(0|3|4|190)/)' \
			'-CreateDate>DateTimeOriginal' \
			${1+"$@"}

		__msg 'Fix remaining missing CreateDate if DateTimeOriginal is present'
		$E -d '%Y-%m-%dT%H:%M:%S%z' \
			-if '$DateTimeOriginal and not ($DateTimeOriginal =~ /^(0|3|4|190)/)' \
			-if '(not $CreateDate) or ($CreateDate =~ /^(0|3|4|190)/)' \
			'-DateTimeOriginal>CreateDate' \
			${1+"$@"}

		__msg 'Fix timestamps with ModifyDate if present'
		$E -d '%Y-%m-%dT%H:%M:%S%z' \
			-if '(not $CreateDate) or ($CreateDate =~ /^(0|3|4|190)/)' \
			-if '$ModifyDate and not ($ModifyDate =~ /^(0|3|4|190)/)' \
			'-ModifyDate>CreateDate' \
			'-ModifyDate>DateTimeOriginal' \
			${1+"$@"}

		__msg 'Fix remaining missing timestamps with file modification time'
		$E -d '%Y-%m-%dT%H:%M:%S%z' \
			-if '(not $CreateDate) or ($CreateDate =~ /^(0|3|4|190)/)' \
			'-FileModifyDate>CreateDate' \
			'-FileModifyDate>DateTimeOriginal' \
			${1+"$@"}

		__msg 'Fix files modification time and rename to match timestamp, model, title and people'
		$E -d '%Y-%m-%dT%H:%M:%S%z' \
			-charset 'filename=UTF8' \
			'-FileModifyDate<CreateDate' \
			'-FileName<${CreateDate#;DateFmt("%Y-%m-%dT%H%M%S%z.%%.5c")}${model;s/[<>\/:\*\?]//g;s/^/ /}${title;s/[<>\/:\*\?]//g;s/^/ - /}.%e' \
			${1+"$@"}

		printf "\n\x1b[40;32;1m\x1b[K\n  ✅ Done!\x1b[K\n\x1b[K\x1b[0m\n\n"
	)

	# Show EXIF timestamps
	#
	# $1: glob
	function show-media-creation-time() {
		exiftool -m -r -api QuickTimeUTC -d '%Y-%m-%dT%H:%M:%S%z' -p '$Directory/$Filename:${CreateDate;s/^/ c=/}${DateTimeOriginal;s/^/ o=/}${ModifyDate;s/^/ m=/}${FileModifyDate;s/^/ t=/}' ${1+"$@"}
	}

	# Overwrite the CreateDate EXIF tag
	#
	# $1: gate in %Y-%m-%dT%H:%M:%S%z format
	# $2: glob
	function set-media-creation-time() (
		set +e -u -o pipefail # Note +e: exiftool "fails" when no file was processed
		declare CREATION_TIME="$1"
		shift
		exiftool -m -r -P -progress -overwrite_original -api QuickTimeUTC -d '%Y-%m-%dT%H:%M:%S%z' "-CreateDate=$CREATION_TIME" ${1+"$@"}
	)
}

# Requires `brew install ghostscript`
! has-command gsx || {
	function optimize-pdf() (
		set -e -u -o pipefail
		function gsx-command() {
			declare -a PDF_ARGS=(
				'-dPDFSETTINGS=/screen'
				'-dNOPAUSE'
				'-dQUIET'
				'-dBATCH'
				'-dCompatibilityLevel=1.5'
				# font settings
				'-dSubsetFonts=true'
				'-dCompressFonts=true'
				'-dEmbedAllFonts=true'
				# color format
				'-sProcessColorModel=DeviceRGB'
				'-sColorConversionStrategy=RGB'
				'-sColorConversionStrategyForImages=RGB'
				'-dConvertCMYKImagesToRGB=true'
				# image resample
				'-dDetectDuplicateImages=true'
				'-dColorImageDownsampleType=/Bicubic'
				"-dColorImageResolution=$DPI"
				'-dGrayImageDownsampleType=/Bicubic'
				"-dGrayImageResolution=$DPI"
				'-dMonoImageDownsampleType=/Bicubic'
				"-dMonoImageResolution=$DPI"
				'-dDownsampleColorImages=true'
				# preset overrides
				'-dDoThumbnails=false'
				'-dCreateJobTicket=false'
				'-dPreserveEPSInfo=false'
				'-dPreserveOPIComments=false'
				'-dPreserveOverprintSettings=false'
				'-dUCRandBGInfo=/Remove'
			)
			export PYTHONIOENCODING=utf_8
			gsx -sDEVICE=pdfwrite "${PDF_ARGS[@]}" "-sOutputFile=$2" "$1"
		}
		export -f gsx-command
		declare DPI=${2:-300}
		process-file pdf optimized.pdf gsx-command "$1"
	)
}

[ ! -x "/usr/local/opt/mozjpeg/bin/cjpeg" ] || {
	function mozjpeg() (
		set -e -u -o pipefail
		export PATH="/usr/local/opt/mozjpeg/bin:$PATH"
		cjpeg ${1+"$@"}
	)

	# Optimize a JPEG image with MozJPEG
	#
	# $1: path to image
	#
	# FIXME: Use process-file
	function optimize-jpeg() (
		set -e -u -o pipefail
		! [[ "$1" =~ ^(.+)\.[jJ][pP][eE]?[gG]$ ]] || {
			declare T="${1}.tmp"
			mozjpeg -dct float -quality 90 "$1" >"$T" && {
				# Compare sizes
				declare $(stat -s "$1")
				declare S_SIZE=$st_size
				declare $(stat -s "$T")
				declare D_SIZE=$st_size
				declare GAIN=$((100 - $D_SIZE * 100 / $S_SIZE))
				(($GAIN < 2)) && {
					printf '❌ Could not optimize %s (gain too small: -%i%%)\n' "$1" $GAIN
				} || {
					touch -f -r "$1" "$T" \
						&& mv -f "$T" "$1" \
						&& printf "✅ Optimized: %s (-%i%%)\n" "$1" "$GAIN"
				}
			} || {
				printf '❌ Could not optimize %s\n' "$1"
				rm -f "$T"
				false
			}
		}
	)

	# Optimize many JPEG images with MozJPEG
	#
	# $1…: globs
	function optimize-jpegs() {
		process-many-files mozjpeg optimize-jpeg '-type f -iregex .*\.jpe?g$' ${1+"$@"}
	}
}

[ ! -x "/usr/local/opt/libheif/bin/heif-convert" ] || {
	# Render a HEIF image into a JPEG
	#
	# $1: input image path
	#
	# FIXME: use a passthru process-file processor instead
	function render-heif-image-to-jpeg() {
		declare FILE_EXT="${1##*.}"
		echo $FILE_EXT $1
		! [[ "${FILE_EXT,,}" =~ ^hei[fc]$ ]] || {
			"/usr/local/opt/libheif/bin/heif-convert" -q 100 "$1" "${1}.jpg"
			! command >&- 2>&- -v optimize-jpeg || optimize-jpeg "${1}.jpg"
		}
	}

	# Render many HEIF images
	#
	# $1: globs
	function render-all-heif-images-to-jpeg() {
		process-many-files 'mozjpeg optimize-jpeg' render-heif-image-to-jpeg '-type f -iregex .*\.hei[cf]$' ${1+"$@"}
	}
}
